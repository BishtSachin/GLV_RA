@page "/changepassword"
@layout EmptyLayout
@attribute [Authorize]
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using GoldLoanReappraisal.Components.Layout
@using GoldLoanReappraisal.Data.Models
@using GoldLoanReappraisal.Data.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authentication;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserValidationService UserValidationService

<PageTitle>Change Password</PageTitle>

<div class="login-container">
    <div class="login-card" style="max-width: 500px;">
        <h3 class="text-center mb-4" style="font-weight: 600;">Change Your Password</h3>
        <p class="text-center text-muted">For activating your user account, you must set a new password to continue.</p>

        <EditForm Model="changePasswordModel" OnValidSubmit="HandlePasswordChange" FormName="ChangePassword">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="new-password" class="form-label">New Password</label>
                <InputText id="new-password" type="password" @bind-Value="changePasswordModel.NewPassword" class="form-control" />
                <ValidationMessage For="() => changePasswordModel.NewPassword" />
            </div>

            <div class="mb-3">
                <label for="confirm-password" class="form-label">Confirm New Password</label>
                <InputText id="confirm-password" type="password" @bind-Value="changePasswordModel.ConfirmPassword" class="form-control" />
                <ValidationMessage For="() => changePasswordModel.ConfirmPassword" />
            </div>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }

            <div class="d-grid mt-4">
                <button type="submit" class="btn btn-primary">Set New Password</button>
            </div>
        </EditForm>

    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public ChangePasswordFormModel changePasswordModel { get; set; } = new();
    private string? errorMessage;

    private async Task HandlePasswordChange()
    {
        errorMessage = null;

        var newPassword = changePasswordModel.NewPassword!;

        // Custom validation for character complexity
        if (!newPassword.Any(char.IsUpper))
        {
            errorMessage = "Password must contain at least one uppercase letter.";
            return;
        }
        if (!newPassword.Any(char.IsLower))
        {
            errorMessage = "Password must contain at least one lowercase letter.";
            return;
        }
        if (!newPassword.Any(char.IsDigit))
        {
            errorMessage = "Password must contain at least one number.";
            return;
        }
        if (newPassword.All(char.IsLetterOrDigit))
        {
            errorMessage = "Password must contain at least one special character.";
            return;
        }
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Identity?.Name;

        if (string.IsNullOrEmpty(userId))
        {
            errorMessage = "Cannot identify the current user.";
            return;
        }

        var success = await UserValidationService.UpdatePasswordAsync(userId, newPassword);

        if (success)
        {
            // We must now manually redirect to the logout endpoint to clear the cookie
            NavigationManager.NavigateTo("api/auth/logout", forceLoad: true);
        }
        else
        {
            errorMessage = "An error occurred on the server while changing your password.";
        }
    }

}