UserManagement.razor:

@page "/user-management"
@layout EmptyLayout
@attribute [Authorize(Roles = "Admin,Region,Zone")]
@using GoldLoanReappraisal.Components.Layout
@using GoldLoanReappraisal.Data.Models
@using GoldLoanReappraisal.Data.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject UserManagementService UserManagementService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>User Management</PageTitle>

<div class="user-management-container">
    <h1>User Management</h1>
    <p class="text-muted">The following users are visible to you based on your role.</p>
    <hr />

    @if (_users == null)
    {
        <p><em>Loading user list...</em></p>
    }
    else if (!_users.Any())
    {
        <div class="alert alert-info">No other users are visible to you.</div>
    }
    else
    {
        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>User ID</th>
                        <th>User Type</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in _users)
                    {
                        <tr>
                            <td>@user.USERID</td>
                            <td>@user.USERTYPE</td>
                            <td>@user.USERSTATUS</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private IEnumerable<VisibleUser>? _users;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var currentUserId = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(currentUserId))
        {
            _users = await UserManagementService.GetVisibleUsersAsync(currentUserId);
        }
        else
        {
            _users = new List<VisibleUser>();
        }
    }
}

UserManagement.razor.css:

/* In Components/Pages/UserManagement.razor.css */

/* This wrapper will give the page its own background color */
.user-management-container {
    width: 100%;
    height: 100%;
    background-color: #f4f6f9; /* A clean, light grey background */
    padding: 2rem;
}

h1 {
    font-weight: 600;
    color: #1e293b; /* A dark blue-charcoal text color */
}

/* A container for the table to give it a card-like appearance */
.table-container {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.07);
    padding: 1.5rem;
}

.table {
    margin-bottom: 0; /* Remove default bottom margin from bootstrap table */
}

    .table thead th {
        border-bottom-width: 2px;
        font-weight: 500;
        color: #495057;
    }

    .table td {
        vertical-align: middle;
    }

/* Style for the text when the table is empty */
.alert-info {
    background-color: #e2f3ff;
    border-color: #b6e3ff;
    color: #0d6efd;
}
